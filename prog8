ZigZag tree
Send Feedback
Given a binary tree, print the zig zag order i.e print level 1 from left to right, level 2 from right to left and so on. This means odd levels should get printed from left to right and even level right to left.
Input format :

Elements in level order form (separated by space)

(If any node does not have left or right child, take -1 in its place)

Output Format :

Elements are printed level wise, each level in new line (separated by space).

Sample Input :
5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1
Sample Output :
5
10 6
2 3
9

// Following is the Binary Tree node structure
/**************
class BinaryTreeNode {
    public : 
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }
};

***************/
#include <stack> 
void zigZagOrder(BinaryTreeNode<int> *root) {
            // Write your code here
        stack<BinaryTreeNode<int>> s1;
        stack<BinaryTreeNode<int>> s2;
if(!root){
    
return;    
    
}
        bool leftrg = true;
        s1.push(root);
        while(!s1.empty())    
		{
		BinaryTreeNode<int> *temp;    
		temp = s1.top();    
            s1.pop();    
        if(temp)    
		{
    
        cout<<temp->data<< " ";    


        }    
        if(leftrg) 
        {
        if(temp->left)    
        s2.push(temp->left->data);    
        if(temp->right)    
        s2.push(temp->right->data);    



        }    
        else{    

        if(temp->right)    
        s2.push(temp->right->data);    
        if(temp->left)    
        s2.push(temp->left->data);    


    
    
       

            }    



             if(s1.empty())   
             {

            leftrg = !leftrg;    
            swap(s1,s2);
            cout<<endl;     

             }  

            }    

    
}
